/**
Napisati program koji iz datoteke čita dio teksta, riječ po riječ i unosi u binarno stablo pretraživanja
(maksimalna duljina riječi 1024 znaka). Ispisati binarno stablo na „inorder“ način.
Iz binarnog stabla kreirati dvije datoteke, u prvoj se nalaze sve riječi koje počinju samoglasnikom, a u
drugoj sve riječi koje počinju suglasnikom. Riječi zapisane u datotekama moraju biti sortirane po abecedi.
**/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define BUFFER 1024
#define GRESKAALOKACIJE -1
#define NEPOSTOJI -2

typedef struct Cvor *Lista;
struct Cvor
{
	char *rijec;
	Lista Next;
};
typedef struct cvor *Stablo;
struct cvor {
	char* rijec;
	Stablo Lijevo;
	Stablo Desno;
};

Stablo UcitajIzDatoteke(Stablo);
Stablo UnosUStablo(Stablo, char*);
void IspisIn(Stablo);
int Pretrazivanje(Stablo, Lista, Lista);
int UcitajUDatoteku(Lista);
void IspisListe(Lista);
int UnosUListu(Lista, char*);


int main()
{
	Stablo S = NULL;
	FILE *fp1 = NULL;
	FILE *fp2 = NULL;
	struct Cvor L1;
	struct Cvor L2;
	L1.Next = NULL;
	L2.Next = NULL;
	int succ;

	S = UcitajIzDatoteke(S);
	if (S == NULL)
		return GRESKAALOKACIJE;
	IspisIn(S);

	succ = Pretrazivanje(S, &L1, &L2);
	if (succ == GRESKAALOKACIJE)
		return succ;

	succ = UcitajUDatoteku(L1.Next);
	if (succ == GRESKAALOKACIJE || succ == NEPOSTOJI)
		return succ;

	succ = UcitajUDatoteku(L2.Next);
	if (succ == GRESKAALOKACIJE || succ == NEPOSTOJI)
		return succ;

	printf("ispis samoglasnika\n");
	IspisListe(L1.Next);
	printf("\nIspis suglasnika\n");
	IspisListe(L2.Next);

	return 0;
}

Stablo UcitajIzDatoteke(Stablo S)
{
	char *imeDatoteke = NULL;
	FILE*fp = NULL;
	char *rijec = NULL;

	imeDatoteke = (char*)malloc(BUFFER * sizeof(char));
	if (imeDatoteke == NULL)
		return NULL;

	rijec = (char*)malloc(BUFFER * sizeof(char));
	if (rijec == NULL)
		return NULL;


	printf("unesite ime datoteke\n");
	scanf("%s", imeDatoteke);
	strcat(imeDatoteke, ".txt");

	fp = fopen(imeDatoteke, "r");
	if (fp == NULL)
		return NULL;
	while (!feof(fp))
	{
		fscanf(fp, "%s", rijec);
		S = UnosUStablo(S, rijec);
		if (S == NULL)
			return NULL;
	}
	fclose(fp);
	return S;
}
Stablo UnosUStablo(Stablo S, char* rijec)
{
	if (S == NULL)
	{
		S = (Stablo)malloc(sizeof(struct cvor));
		if (S == NULL)
			return NULL;
		S->rijec = (char*)malloc(BUFFER * sizeof(char));
		if (S->rijec == NULL)
			return NULL;
		strcpy(S->rijec, rijec);
		S->Desno = NULL;
		S->Lijevo = NULL;
	}
	else if (strcmp(S->rijec, rijec) > 0)
		S->Lijevo = UnosUStablo(S->Lijevo, rijec);
	else if (strcmp(S->rijec, rijec) < 0)
		S->Desno = UnosUStablo(S->Desno, rijec);
	else
		printf("Element vec postoji\n");
	return S;
}
void IspisIn(Stablo S)
{
	if (S != NULL)
	{
		IspisIn(S->Lijevo);
		printf("%s\n", S->rijec);
		IspisIn(S->Desno);
	}
}
int Pretrazivanje(Stablo S, Lista L1, Lista L2)
{
	if (S != NULL)
	{
		Pretrazivanje(S->Lijevo, L1, L2);
		Pretrazivanje(S->Desno, L1, L2);

		if (*S->rijec == 'a' || *S->rijec == 'e' || *S->rijec == 'i' || *S->rijec == 'o' || *S->rijec == 'u')
		{
			int succ = UnosUListu(L1, S->rijec);
			if (succ == GRESKAALOKACIJE)
				return succ;
		}
		else
		{
			int succ = UnosUListu(L2, S->rijec);
			if (succ == GRESKAALOKACIJE)
				return succ;
		}

	}
	return 0;

}
int UnosUListu(Lista L, char* rijec)
{
	Lista q = (Lista)malloc(sizeof(struct Cvor));
	if (q == NULL)
		return GRESKAALOKACIJE;

	q->rijec = (char*)malloc(BUFFER * sizeof(char));
	if (q->rijec == NULL)
		return GRESKAALOKACIJE;

	strcpy(q->rijec, rijec);

	while (L->Next != NULL && strcmp(L->Next->rijec, rijec) > 0)
		L = L->Next;
	q->Next = L->Next;
	L->Next = q;

	return 0;
}
int UcitajUDatoteku(Lista L)
{
	char* imeDatoteke = NULL;
	FILE* fp = NULL;

	imeDatoteke = (char*)malloc(BUFFER * sizeof(char));
	if (imeDatoteke == NULL)
		return GRESKAALOKACIJE;

	printf("unesite ime datoteke\n");
	scanf("%s", imeDatoteke);
	strcat(imeDatoteke, ".txt");

	fp = fopen(imeDatoteke, "w");
	if (fp == NULL)
		return NEPOSTOJI;
	while (L!= NULL)
	{
		fprintf(fp, "%s\n", L->rijec);
		L = L->Next;
	}
	fclose(fp);
	return 0;
}
void IspisListe(Lista L)
{
	while (L != NULL)
	{
		printf("%s\n", L->rijec);
		L = L->Next;
	}
}
