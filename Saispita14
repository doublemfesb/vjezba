#define _CRT_SECURE_NO_WARNINGS
//me radi
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define HASH_SIZE 23
#define BUFFER 1024

typedef struct hash *Hash;
struct hash {
	int el;
	struct student * lista;
};
typedef struct student *Lista;
struct student {
	char *ime;
	char *prezime;
	int ocjena;
	int ects;
	Lista Next;
};

int UcitajIzDatoteke(Hash);
int UnosUHash(Hash, char*,char*,int,int);
int StvaranjeKljuca(char*,char*);
int UnosUListu(Hash, char*,char*,int,int);
void Ispis(Hash);

int main()
{
	Hash H;
	int i = 0;
	int succ;

	H = (Hash)malloc(HASH_SIZE * sizeof(struct hash));
	if (H == NULL)
		return -1;
	while (i < HASH_SIZE)
	{
		H[i].el = i;
		H[i].lista = NULL;
		i++;
	}

	succ = UcitajIzDatoteke(H);

	Ispis(H);

	return 0;
}
int UcitajIzDatoteke(Hash H)
{
	char *imeDatoteke = NULL;
	char *ime = NULL;
	char *prezime = NULL;
	FILE* fp = NULL;
	int ocjena;
	int ects;
	Lista student;

	imeDatoteke = (char*)malloc(BUFFER * sizeof(char));
	if (imeDatoteke == NULL)
		return -1;
	ime = (char*)malloc(BUFFER * sizeof(char));
	if (ime == NULL)
		return -1;
	prezime = (char*)malloc(BUFFER * sizeof(char));
	if (prezime == NULL)
		return -1;

	printf("Unesite ime datoteke\n");
	scanf("%s", imeDatoteke);
	strcat(imeDatoteke, ".txt");

	fp = fopen(imeDatoteke, "r");
	if (fp == NULL)
		return -2;

	while (!feof(fp))
	{
		fscanf(fp, "%s %s %d %d", ime, prezime, &ocjena, &ects);
		int succ = UnosUHash(H, ime,prezime,ocjena,ects);
	}
	fclose(fp);
	return 0;

}
int UnosUHash(Hash H, char*ime,char*prezime,int ocjena,int ects)
{
	int kljuc = StvaranjeKljuca(ime,prezime);

	int succ = UnosUListu(&H[kljuc], ime,prezime,ocjena,ects);
	return 0;
}
int StvaranjeKljuca(char* ime, char*prezime)
{
	int i = 0;
	int sum = 0;

	while (i < 3)
	{
		sum += ime[i];
		sum += prezime[i];
		i++;
	}
	return sum % HASH_SIZE;
}
int UnosUListu(Hash H, char *ime,char *prezime, int ocjena, int ects)
{
	Lista temp = NULL;

	temp = (Lista)malloc(sizeof(struct student));
	if (temp == NULL)
		return -1;
	temp->ime = (char*)malloc(BUFFER * sizeof(char));
	if (temp->ime == NULL)
		return -1;
	temp->prezime = (char*)malloc(BUFFER * sizeof(char));
	if (temp->prezime == NULL)
		return -1;
	strcpy(temp->ime, ime);
	strcpy(temp->prezime, prezime);
	temp->ects = ects;
	temp->ocjena = ocjena * ects;
	temp->Next = NULL;

	if (H->lista == NULL)
		H->lista = temp;


	else if (strcmp(H->lista->prezime, prezime) < 0)
	{
		temp->Next = H->lista;
		H->lista = temp;
	}
	else
	{
		Lista q = H->lista;
		while (q->Next!= NULL && strcmp(q->Next->prezime,prezime) > 0)
			q = q->Next;
		if (q->Next!= NULL && strcmp(q->Next->prezime,prezime) == 0)
		{
			while (q->Next != NULL && strcmp(q->Next->prezime, prezime) == 0 && strcmp(q->Next->ime,ime) > 0)
				q = q->Next;
		}
		if (q->Next!= NULL && strcmp(q->Next->prezime,prezime) == 0 && strcmp(q->Next->ime,ime) == 0)
		{
			q->ects += ects;
			q->ocjena += ocjena*ects;
			return 0;
		}
		if (q->Next == NULL)
		{
			if (strcmp(q->prezime, prezime) == 0 && strcmp(q->ime, ime) == 0)
			{
				q->ects += ects;
				q->ocjena += ocjena * ects;
				return 0;
			}

		}
		temp->Next = q->Next;
		q->Next = temp;
	}
	return 0;
}
void Ispis(Hash H)
{
	int i = 0;
	while (i < HASH_SIZE)
	{
		printf("Ispisuje se %d redak\n", H[i].el);
		Lista q = H[i].lista;
		while (q != NULL)
		{
			printf("%s %s %d %d\n", q->ime, q->prezime, q->ocjena, q->ects);
			q = q->Next;
		}
		i++;
	}
}
