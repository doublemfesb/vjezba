/**
Napisati program koji:
a) Iz datoteke „drzave.txt“ čita popis država i njihov ID od pročitanih država izgraditi vezanu listu
država na sortirani način od početka prema kraju abecede (treba raditi sortirani unos, a ne
naknadno sortirati). Uz pokazivač na sljedeću državu struktura od koje se gradi vezana lista
mora sadržavati i pokazivač na stablo gradova koji su u toj državi (trenutno NULL) - za 2
b) Iz datoteke „gradovi.txt“ pročitati ime grada i ID države u kojoj se nalazi. Pronaći odgovarajuću
državu u gornjoj listi, te dodati pročitani grad u stablo gradova te države. Za zadanu državu
ispisati sve njene gradove po abecedi. – za 5
**/

/**
Napisati program koji iz datoteke „text.txt“ čita zadani tekst. Od pročitanih riječi se gradi binarno
stablo pretraživanja, s tim da ukoliko se pronađe riječ koja se već nalazi u stablu potrebno ju je
dodati u vezanu listu istih riječi za određeni čvor. Ispisati stablo. Za odabranu riječ ispitat koliko se
puta ponavlja.
***/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define BUFFER 1024
#define GRESKAALOKACIJE -1


typedef struct cvor *Stablo;
struct cvor {
	char* rijec;
	struct cvor* Lijevo;
	struct cvor* Desno;
	struct Cvor* lista;
};

typedef struct Cvor *Lista;
struct Cvor {
	char *rijec;
	Lista Next;
};
Stablo UcitajIzDatoteke(Stablo);
Stablo UnosUStablo(Stablo, char*);
int UnosUListu(char*, Stablo);
void Ispis(Stablo);
int IspisListe(Stablo, char*, int*);
int main()
{
	Stablo S = NULL;
	char* rijec = NULL;
	int brojac = 1;
	int succ;

	rijec = (char*)malloc(BUFFER * sizeof(char));
	if (rijec == NULL)
		return -1;

	S = UcitajIzDatoteke(S);

	Ispis(S);

	printf("Koju rijec zelite nac?\n");
	scanf("%s", rijec);

	succ = IspisListe(S, rijec, &brojac);

	printf("Ispisuje se %d elemenata", brojac);



	return 0;
}
Stablo UcitajIzDatoteke(Stablo S)
{
	char *imeDatoteke = NULL;
	char *string = NULL;
	FILE *fp = NULL;

	imeDatoteke = (char*)malloc(BUFFER * sizeof(char));
	if (imeDatoteke == NULL)
		return NULL;

	string = (char*)malloc(BUFFER * sizeof(char));
	if (string == NULL)
		return NULL;

	printf("unesite ime datoteke\n");
	scanf("%s", imeDatoteke);
	strcat(imeDatoteke, ".txt");

	fp = fopen(imeDatoteke, "r");
	if (fp == NULL)
		return NULL;

	while (!feof(fp))
	{
		fscanf(fp, "%s", string);
		S = UnosUStablo(S, string);
		if (S == NULL)
			return NULL;
	}
	fclose(fp);
	return S;
}
Stablo UnosUStablo(Stablo S, char* rijec)
{
	if (S == NULL)
	{
		S = (Stablo)malloc(sizeof(struct cvor));
		if (S == NULL)
			return NULL;

		S->rijec = (char*)malloc(BUFFER * sizeof(char));
		if (S->rijec == NULL)
			return NULL;
		strcpy(S->rijec, rijec);
		S->Desno = NULL;
		S->Lijevo = NULL;
		S->lista = NULL;
	}
	else if (strcmp(S->rijec, rijec) > 0)
		S->Lijevo = UnosUStablo(S->Lijevo, rijec);
	else if (strcmp(S->rijec, rijec) < 0)
		S->Desno = UnosUStablo(S->Desno, rijec);
	else
	{
		int succ = UnosUListu(rijec, S);
		if (succ == GRESKAALOKACIJE)
			return succ;
	}
	return S;
}
int UnosUListu(char* rijec, Stablo S) {
	Lista temp = NULL;
	Lista prt = NULL;

	temp = (Lista)malloc(sizeof(struct Cvor));
	if (temp == NULL)
		return GRESKAALOKACIJE;

	temp->rijec = (char*)malloc(BUFFER * sizeof(char));
	if (temp->rijec == NULL)
		return GRESKAALOKACIJE;

	temp->Next = NULL;
	strcpy(temp->rijec, rijec);

	if (S->lista == NULL)
		S->lista = temp;
	else
	{
		prt = S->lista;
		while (prt->Next != NULL)
			prt = prt->Next;
		prt->Next = temp;
	}
	return 0;
}
void Ispis(Stablo S)
{
	if (S != NULL)
	{
		Ispis(S->Lijevo);
		printf("%s\n", S->rijec);
		Ispis(S->Desno);
	}
}
int IspisListe(Stablo S, char* rijec, int* br)
{
	if (S != NULL)
	{
		IspisListe(S->Lijevo, rijec, br);
		IspisListe(S->Desno, rijec, br);

		if (strcmp(S->rijec, rijec) == 0)
		{
			Lista q = S->lista;
			while (q != NULL)
			{
				(*br)++;
				q = q->Next;
			}

		}
	}
	return 0;

}
